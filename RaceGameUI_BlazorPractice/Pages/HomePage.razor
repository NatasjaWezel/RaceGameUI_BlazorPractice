@page "/"
@using RaceGameUI_BlazorPractice.Web.Models
@using RaceGameUI_BlazorPractice.Web.Services
@using System.Diagnostics

@implements IDisposable

@inject IRaceTrackService _raceTrackService
@inject IBettorService _bettorService
@inject IGreyHoundService _greyHoundService

<PageTitle>HomePage</PageTitle>

<div class="container">
    <h1>Welcome on this Race Track Simulator!</h1>
    <div class="row">  
        <div style="background:green" class="col box">
            @foreach (var hound in greyHounds)
            {
                <div style="display:inline-block;width:5%">@hound.Name</div>
                <div style="display:inline-block;width:@hound.GetPercentage()%">&nbsp;</div>
                <div style="display:inline-block"><img height=40 src="images/greyhoundracing.png"/></div>
                <div style="display:inline-block" hidden="@hound.hideMedal1"><img height=40 src="images/olympic-medal-1st-place.png"/></div>
                <div style="display:inline-block" hidden="@hound.hideMedal2"><img height=40 src="images/olympic-medal-2nd-place.png"/></div>
                <div style="display:inline-block" hidden="@hound.hideMedal3"><img height=40 src="images/olympic-medal-3rd-place.png"/></div>
                <br>
            }
        </div>
  </div>

  <div class="row">
     <div class="col box col-sm-5">
            <h3>Betting stats</h3>
            <div style='overflow-y:auto'>            
                <table class="table">
                <tr>
                    <th> Name </th>
                    <th> Starting Capital </th>
                    <th> Current Capital </th>
                    <th> Bet Amount </th>
                    <th> Greyhound </th>
                    <th> Profit </th>
                </tr>
                    @foreach (var bettor in bettors)
                    {
                        <tr>
                            <td><p>@bettor.Name</p></td>
                            <td><p>@bettor.StartingCash</p></td>
                            <td><p>@bettor.CurrentCash</p></td>
                            @if (@bettor.MyBet == null) {
                                <td><p>-</p></td>
                                <td><p>-</p></td>
                            } else {
                                <td><p>@bettor.MyBet.Amount</p></td>
                                <td><p>@_greyHoundService.GetGreyHoundName(bettor.MyBet.DogId)</p></td>
                            }
                            @if (bettor.CurrentCash - bettor.StartingCash > 0)
                            {
                                <td><p style="color:green">+ @(bettor.CurrentCash - bettor.StartingCash)</p></td>
                            } else if (bettor.CurrentCash - bettor.StartingCash < 0)
                            {
                            <td><p style="color:red">@(bettor.CurrentCash - bettor.StartingCash)</p></td>
                            } else
                            {
                                <td><p style="color:black">@(bettor.CurrentCash - bettor.StartingCash)</p></td>
                            }

                        </tr>
                    }
                </table>
            </div>

            <button type="button" class="btn btn-secondary btn-sm" @onclick="PlaceRandomBets">Fill with random bets</button>
        </div>
    <div class="col box">
           <div class="row">
               <h3>Place your bet!</h3>
                <p style="display:inline-block">Betting amount has to be between @RaceTrackService.minInvestment and @RaceTrackService.maxInvestment</p>

                <div class="linecontainer">
                    <div style="width:20%;display:inline">                
                        <select name="bettors" id="bettors" @bind="@_selectedBettorName">
                            @foreach (var bettor in bettors)
                            {
                                <option value=@bettor.Name>@bettor.Name</option>
                            }
                        </select>
                    </div>

                    <div style="width:20%;display:inline">
                        <label for="quantity">bets</label>
                        <input style="width:15%" type="number" id="quantity" min=5 max=15 @bind="@_selectedBetAmount">
                    </div>

                    <div style="width:25%;display:inline">
                        <label for="dogs">bucks on dog:</label>
                        <select name="dogs" id="dogs" @bind="@_selectedGreyHoundId">
                            @foreach (var hound in greyHounds)
                            {
                                <option value=@hound.Id>@hound.Name</option>
                            }
                        </select>
                    </div>
                </div>
                
                <button class="btn btn-secondary btn-sm" @onclick="PlaceBet">Place bet</button>
           </div>
    </div>

    <div class="col box">
        <button type="button" class="btn btn-primary btn-lg" @onclick="StartRace">Start Race!!</button>
        <button type="button" class="btn btn-primary btn-lg" @onclick="ResetRace">Reset Race!!</button>
    </div>

</div>
</div>

@code {
    private List<BettorViewModel>? bettors;
    private List<GreyHoundViewModel>? greyHounds;

    // to place bets
    private string _selectedBettorName = "";
    private int _selectedGreyHoundId;
    private int _selectedBetAmount = 5;

    protected override async Task OnInitializedAsync()
    {
        bettors = await _bettorService.GetBettorsAsync();
        _selectedBettorName = bettors[0].Name;
        greyHounds = await _greyHoundService.GetGreyHoundsAsync();

        _greyHoundService.OnDogStep += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _greyHoundService.OnDogStep -= () => InvokeAsync(StateHasChanged);
    }

    public async void StartRace()
    {
        await Task.Run(_raceTrackService.SimulateRace);
        await InvokeAsync(() => StateHasChanged());
    }

    public async void ResetRace()
    {
        await Task.Run(_raceTrackService.ResetRace);
        await InvokeAsync(() => StateHasChanged());
    }

    public async void PlaceRandomBets()
    {
        await _bettorService.PlaceRandomBetsAsync();
        await InvokeAsync(() => StateHasChanged());
    }

    public async void PlaceBet()
    {
        Debug.Print($"{_selectedBettorName} places {_selectedBetAmount} on dog id: {_selectedGreyHoundId} !");

        await _bettorService.PlaceBetAsync(_selectedBettorName, _selectedGreyHoundId, _selectedBetAmount);
    }
}   